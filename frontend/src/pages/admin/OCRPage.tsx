import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Camera, Upload, BookOpen, CheckCircle, XCircle, Loader } from 'lucide-react';

interface OCRResult {
  isbn: string;
  title?: string;
  authors?: string[];
  publisher?: string;
  publishYear?: number;
  description?: string;
  coverImage?: string;
}

export default function OCRPage() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [preview, setPreview] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<OCRResult | null>(null);
  const [error, setError] = useState('');

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      setPreview(URL.createObjectURL(file));
      setResult(null);
      setError('');
    }
  };

  const handleOCR = async () => {
    if (!selectedFile) return;

    setLoading(true);
    setError('');

    try {
      const formData = new FormData();
      formData.append('image', selectedFile);

      const response = await fetch('http://localhost:8000/api/ocr/extract-isbn', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        setResult(data);
      } else {
        setError('Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng ISBN t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ ·∫£nh kh√°c.');
      }
    } catch (err) {
      console.error('OCR error:', err);
      setError('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const handleAddToLibrary = () => {
    if (!result) return;
    // Navigate to add book page with pre-filled data
    alert('Ch·ª©c nƒÉng th√™m v√†o th∆∞ vi·ªán ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!');
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div>
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <Camera className="w-8 h-8 text-primary" />
          Nh·∫≠n D·∫°ng S√°ch T·ª´ ·∫¢nh (OCR)
        </h1>
        <p className="text-muted-foreground mt-1">
          T·ª± ƒë·ªông tr√≠ch xu·∫•t ISBN v√† th√¥ng tin s√°ch t·ª´ ·∫£nh b√¨a
        </p>
      </div>

      {/* How it works */}
      <Card className="bg-gradient-to-r from-primary/5 to-background">
        <CardHeader>
          <CardTitle className="text-lg">ü§ñ C√°ch s·ª≠ d·ª•ng</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-4 text-sm">
            <div>
              <div className="font-semibold mb-1">1. T·∫£i ·∫£nh l√™n</div>
              <p className="text-muted-foreground">
                Ch·ªçn ·∫£nh b√¨a s√°ch c√≥ ch·ª©a m√£ ISBN r√µ r√†ng
              </p>
            </div>
            <div>
              <div className="font-semibold mb-1">2. Nh·∫≠n d·∫°ng</div>
              <p className="text-muted-foreground">
                AI s·∫Ω t·ª± ƒë·ªông ƒë·ªçc ISBN v√† tra c·ª©u th√¥ng tin
              </p>
            </div>
            <div>
              <div className="font-semibold mb-1">3. Th√™m v√†o th∆∞ vi·ªán</div>
              <p className="text-muted-foreground">
                X√°c nh·∫≠n v√† th√™m s√°ch v√†o h·ªá th·ªëng
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Upload Section */}
      <Card>
        <CardHeader>
          <CardTitle>T·∫£i ·∫¢nh L√™n</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
            {preview ? (
              <div className="space-y-4">
                <img
                  src={preview}
                  alt="Preview"
                  className="max-h-96 mx-auto rounded-lg shadow-lg"
                />
                <Button variant="outline" onClick={() => {
                  setPreview('');
                  setSelectedFile(null);
                  setResult(null);
                  setError('');
                }}>
                  Ch·ªçn ·∫£nh kh√°c
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                <Upload className="w-16 h-16 mx-auto text-muted-foreground" />
                <div>
                  <p className="text-lg font-medium mb-2">T·∫£i ·∫£nh b√¨a s√°ch l√™n</p>
                  <p className="text-sm text-muted-foreground mb-4">
                    H·ªó tr·ª£: JPG, PNG, JPEG (t·ªëi ƒëa 10MB)
                  </p>
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <Button type="button">
                      <Camera className="w-4 h-4 mr-2" />
                      Ch·ªçn ·∫¢nh
                    </Button>
                  </label>
                  <Input
                    id="file-upload"
                    type="file"
                    accept="image/*"
                    onChange={handleFileSelect}
                    className="hidden"
                  />
                </div>
              </div>
            )}
          </div>

          {preview && !result && (
            <Button
              onClick={handleOCR}
              disabled={loading}
              className="w-full"
              size="lg"
            >
              {loading ? (
                <>
                  <Loader className="w-5 h-5 mr-2 animate-spin" />
                  ƒêang nh·∫≠n d·∫°ng...
                </>
              ) : (
                <>
                  <Camera className="w-5 h-5 mr-2" />
                  Nh·∫≠n D·∫°ng ISBN
                </>
              )}
            </Button>
          )}

          {error && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3">
              <XCircle className="w-5 h-5 text-red-600 mt-0.5" />
              <div>
                <p className="font-medium text-red-900">L·ªói nh·∫≠n d·∫°ng</p>
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Result Section */}
      {result && (
        <Card className="border-2 border-green-200 bg-green-50">
          <CardHeader>
            <div className="flex items-center gap-2">
              <CheckCircle className="w-6 h-6 text-green-600" />
              <CardTitle className="text-green-900">Nh·∫≠n D·∫°ng Th√†nh C√¥ng!</CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-white rounded-lg p-4 space-y-3">
              <div className="flex items-start gap-4">
                {result.coverImage && (
                  <img
                    src={result.coverImage}
                    alt={result.title}
                    className="w-24 h-32 object-cover rounded shadow"
                  />
                )}
                <div className="flex-1 space-y-2">
                  <div>
                    <p className="text-sm text-muted-foreground">ISBN</p>
                    <p className="text-lg font-bold text-primary">{result.isbn}</p>
                  </div>
                  {result.title && (
                    <div>
                      <p className="text-sm text-muted-foreground">Ti√™u ƒë·ªÅ</p>
                      <p className="font-semibold">{result.title}</p>
                    </div>
                  )}
                  {result.authors && result.authors.length > 0 && (
                    <div>
                      <p className="text-sm text-muted-foreground">T√°c gi·∫£</p>
                      <p>{result.authors.join(', ')}</p>
                    </div>
                  )}
                  {result.publisher && (
                    <div>
                      <p className="text-sm text-muted-foreground">Nh√† xu·∫•t b·∫£n</p>
                      <p>{result.publisher}</p>
                    </div>
                  )}
                  {result.publishYear && (
                    <div>
                      <p className="text-sm text-muted-foreground">NƒÉm xu·∫•t b·∫£n</p>
                      <p>{result.publishYear}</p>
                    </div>
                  )}
                </div>
              </div>

              {result.description && (
                <div>
                  <p className="text-sm text-muted-foreground mb-1">M√¥ t·∫£</p>
                  <p className="text-sm line-clamp-3">{result.description}</p>
                </div>
              )}
            </div>

            <div className="flex gap-2">
              <Button onClick={handleAddToLibrary} className="flex-1">
                <BookOpen className="w-4 h-4 mr-2" />
                Th√™m V√†o Th∆∞ Vi·ªán
              </Button>
              <Button
                variant="outline"
                onClick={() => {
                  setPreview('');
                  setSelectedFile(null);
                  setResult(null);
                  setError('');
                }}
              >
                Nh·∫≠n D·∫°ng S√°ch Kh√°c
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Tips */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <h3 className="font-semibold text-blue-900 mb-2">üí° M·∫πo ƒë·ªÉ nh·∫≠n d·∫°ng t·ªët h∆°n</h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ Ch·ª•p ·∫£nh r√µ n√©t, ƒë·ªß s√°ng</li>
            <li>‚Ä¢ ƒê·∫£m b·∫£o m√£ ISBN kh√¥ng b·ªã che khu·∫•t</li>
            <li>‚Ä¢ Ch·ª•p th·∫≥ng g√≥c, tr√°nh b·ªã nghi√™ng</li>
            <li>‚Ä¢ S·ª≠ d·ª•ng ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao</li>
            <li>‚Ä¢ N·∫øu kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c, th·ª≠ ch·ª•p l·∫°i ho·∫∑c nh·∫≠p th·ªß c√¥ng</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
